[[plugins]]
repo = 'sainnhe/artify.vim'

[[plugins]]
repo = 'lewis6991/impatient.nvim'
hook_add = '''
lua <<EOF

--chunks={
--enable=true,
--path=vim.fn.stdpath('cache')..'/luacache_chunks',
--},
--modpaths={
--enable=true,
--path=vim.fn.stdpath('cache')..'/luacache_modpaths',
--}
require('impatient')
EOF
'''


#[[plugins]]
#repo = 'nathom/filetype.nvim'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:vim_lightline_artify = 2

function! LightlineLSPWarnings() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.warning == 0 ? '' : printf("\uf071:%d", l:counts.warning)
endfunction


function! LightlineLSPErrors() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.error == 0 ? '' : printf("\uf057:%d", l:counts.error)
endfunction


function! LightlineLSPOk() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    let l:total = l:counts.error + l:counts.warning
    return l:total == 0 ? "\uf058" : ''
endfunction


augroup LightLineOnLSP
    autocmd!
    autocmd User lsp_diagnostics_updated call lightline#update()
augroup END



function! DeviconsFiletype()
    " return winwidth(0) > 70 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : 'no ft') : ''
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction


function! TabNum(n) abort
    return a:n." \ue0bb"
endfunction

function! ArtifyActiveTabNum(n) abort
    return artify#convert(a:n, 'bold')." \ue0bb"
endfunction

function! ArtifyInactiveTabNum(n) abort
    return artify#convert(a:n, 'double_struck')." \ue0bb"
endfunction

function! ArtifyLightlineTabFilename(s) abort
    if g:vim_lightline_artify ==# 2
        return artify#convert(lightline#tab#filename(a:s), 'monospace')
    else
        return lightline#tab#filename(a:s)
    endif
endfunction

function! ArtifyLightlineMode() abort
    if g:vim_lightline_artify ==# 2
        return artify#convert(lightline#mode(), 'monospace')
    else
        return lightline#mode()
    endif
endfunction

function! ArtifyLinePercent() abort
    return artify#convert(string(100*(line('.')) / line('$')), 'bold')
endfunction

function! ArtifyLineNum() abort
    return artify#convert(string(line('.')), 'bold')
endfunction

function! ArtifyColNum() abort
    return artify#convert(string(getcurpos()[2]), 'bold')
endfunction

set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'wombat', }
let g:lightline.separator = {'left': "\ue0b8", 'right' : "\ue0be"}
let g:lightline.subseparator = { 'left': "\ue0b9", 'right': "\ue0b9" }
let g:lightline.tabline_separator = { 'left': "\ue0bc", 'right': "\ue0ba" }
let g:lightline.tabline_subseparator = { 'left': "\ue0bb", 'right': "\ue0bb" }
let g:lightline#asyncrun#indicator_none = ''
let g:lightline#asyncrun#indicator_run = 'Running...'
if g:vim_lightline_artify == 0
    let g:lightline.active = {
        \ 'left': [ [ 'mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'lineinfo' ],
        \            [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
        \            [ 'asyncrun_status' ] ]
        \ }
    let g:lightline.inactive = {
        \ 'left': [ [ 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right':[ [ 'lineinfo' ] ]
        \ }
    let g:lightline.tabline = {
        \ 'left': [ [ 'vim_logo', 'buffers' ] ],
        \ 'right': [ [ 'git_global' ],
        \            [ 'git_buffer' ] ]
        \ }
    let g:lightline.tab = {
        \ 'active': [ 'tabnum', 'filename', 'modified' ],
        \ 'inactive': [ 'tabnum', 'filename', 'modified' ]
        \ }
else
    let g:lightline.active = {
        \ 'left': [ [ 'artify_mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'artify_lineinfo' ],
        \            [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
        \            [ 'asyncrun_status' ] ]
        \ }
    let g:lightline.inactive = {
        \ 'left': [ [ 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'artify_lineinfo' ] ]
        \ }
    let g:lightline.tabline = {
        \ 'left': [ [ 'vim_logo', 'buffers' ] ],
        \ 'right': [ [ 'git_global' ],
        \            [ 'git_buffer' ] ]
        \ }
    let g:lightline.tab = {
        \ 'active': [ 'artify_activetabnum', 'artify_filename', 'modified' ],
        \ 'inactive': [ 'artify_inactivetabnum', 'filename', 'modified' ]
        \ }
endif
let g:lightline.tab_component_function = {
    \ 'artify_activetabnum': 'ArtifyciveTabNum',
    \ 'artify_inactivetabnum': 'ArtifyInactiveTabNum',
    \ 'artify_filename': 'ArtifyLightlineTabFilename',
    \ 'tabnum': 'TabNum',
    \ 'filename': 'lightline#tab#filename',
    \ 'modified': 'lightline#tab#modified',
    \ 'readonly': 'lightline#tab#readonly'
    \ }
let g:lightline.component = {
    \ 'git_buffer': '',
    \ 'gitglobal': '',
    \ 'artify_mode': '%{ArtifyLightlineMode()}',
    \ 'artify_lineinfo': "%2{ArtifyLinePercent()}\uf295 %3{ArtifyLineNum()}:%-2{ArtifyColNum()}",
    \ 'bufinfo': '%{bufname("%")}:%{bufnr("%")}',
    \ 'vim_logo': "\ue7c5",
    \ 'mode': '%{lightline#mode()}',
    \ 'absolutepath': '%F',
    \ 'relativepath':'%f',
    \ 'filename': '%t',
    \ 'fileencoding': '%{&fenc!=#""?&fenc:&enc}',
    \ 'fileformat': '%{&fenc!=#""?&fenc:&enc}[%{&ff}]',
    \ 'filetype': '%{&ft!=#""?&ft:"no ft"}',
    \ 'modified': '%M',
    \ 'bufnum': '%n',
    \ 'paste': '%{&paste?"PASTE":""}',
    \ 'readonly': '%R',
    \ 'charvalue': '%b',
    \ 'charvaluehex': '%B',
    \ 'percent': '%3p%%',
    \ 'percentwin': '%P',
    \ 'spell': '%{ &spell?&spelllang:""}',
    \ 'lineinfo': '%3p%% %3l:%-2c',
    \ 'line': '%l',
    \ 'column': '%c',
    \ 'close': '%999X X ',
    \ 'winnr': '%{winnr()}'
    \ }
let g:lightline.component_function = {
    \ 'devicons_filetype': 'DeviconsFiletype',
    \ }
let g:lightline.component_expand = {
    \ 'lsp_warnings': 'LightlineLSPWarnings',
    \ 'lsp_errors': 'LightlineLSPErrors',
    \ 'lsp_ok': 'LightlineLSPOk',
    \ 'buffers': 'lightline#bufferline#buffers',
    \ 'tabs': 'lightline#tabs',
    \ 'asyncrun_status': 'lightline#asyncrun#status'
    \ }
let g:lightline.component_type = {
    \ 'lsp_warnings': 'warning',
    \ 'lsp_errors': 'error',
    \ 'lsp_ok': 'middle',
    \ 'buffers': 'tabsel',
    \ 'tabs': 'tabsel'
    \ }
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'macthecadillac/lightline-gitdiff'

[[plugins]]
repo = 'mengelbrecht/lightline-bufferline'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add='''
let g:webdevicons_enable_lightline_statusline = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_color_gui = '#aaaaaa'
let g:indentLine_bgcolor_gui = '#242424'
"let g:indentLine_char = '|'
'''

[[plugins]]
repo = 'tpope/vim-surround'


[[plugins]]
repo = 'vim-denops/denops.vim'


[[plugins]]
repo = 'skywind3000/asyncrun.vim'

[[plugins]]
repo = 'albertomontesg/lightline-asyncrun'
depend = ['asyncrun.vim','lightline.vim']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
hook_add = '''
nnoremap <silent><leader>ld :LspDefinition<CR>
nnoremap <silent><leader>lh :LspHover<CR>
nnoremap <silent><leader>le :LspNextError<CR>
nnoremap <silent><leader>lE :LspPreviousError<CR>
nnoremap <silent><leader>lr :LspRename<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]  
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
#[[plugins]]
#repo = 'Shougo/ddu.vim'
#depend = 'denops.vim'
#hook_add = '''
#let float_width = 0.85
#let float_height = 0.7
#call ddu#custom#patch_global({
#\   'ui': 'ff',
#\   'uiParams': {
#\       'ff': {
#\           'split': 'floating',
#\           'startFilter': v:true,
#\           'prompt': '> ',
#\           'winWidth': float2nr(&columns * float_width),
#\           'winCol': float2nr((&columns - (&columns * float_width)) / 2),
#\           'winHeight': float2nr(&lines * float_height),
#\           'winRow': float2nr((&lines - (&lines * float_height)) / 2),
#\       },
#\   },
#\   'sources': [
#\       {'name':'file'},
#\       {'name':'line'},
#\       {'name':'buffer'},
#\       {'name':'register'},
#\   ],
#\   'sourceOptions': {
#\       '_': {
#\           'matchers': ['matcher_substring'],
#\           'ignoreCase': v:true,
#\           'sorters': [
#\               'sorter_alpha',
#\           ]
#\       },
#\   },
#\   'filterParams': {
#\       'matcher_substring': {
#\           'defaultAction': 'open',
#\       },
#\   },
#\   'kindOptions': {
#\       'file': {
#\           'defaultAction': 'open',
#\       },
#\       'word': {
#\           'defaultAction': 'append',
#\       },
#\   },
#\})

#call ddu#custom#patch_local('file_rec', {
#\   'sources': [{
#\       'name':'file_rec',
#\       'params': {
#\           'ignoredDirectories': ['.git', 'var', 'node_modules',]
#\       },
#\   }],
#\})

#call ddu#custom#patch_local('filer', {
#\   'ui': 'filer',
#\   'uiParams': {
#\       'filer': {
#\           'split': 'vertical',
#\           'splitDirection': 'topleft',
#\           'winWidth': 30,
#\       },
#\   },
#\   'sources': [
#\       {'name': 'file', 'params': {}},
#\   ],
#\   'sourceOptions': {
#\       '_': {
#\           'columns': ['filename'],
#\       },
#\   },
#\   'columns': ['filename'],
#\   'kindOptions': {
#\       'file': {
#\           'defaultAction': 'open',
#\       },
#\   },
#\   'actionOptions': {
#\       'narrow': {
#\           'quit': v:true,
#\       },
#\   },
#\})

#autocmd FileType ddu-ff call s:ddu_ff_settings()
#function! s:ddu_ff_settings() abort
    #nnoremap <buffer><silent> <CR> <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
    #nnoremap <buffer><silent> s <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
    #nnoremap <buffer><silent> i <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
    #nnoremap <buffer><silent> q <Cmd>call ddu#ui#ff#do_action('quit')<CR>
#endfunction

#autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
#function! s:ddu_filter_my_settings() abort
    #nnoremap <butter><silent> <CR> :q<CR>
    #nnoremap <butter><silent> <ESC> :q<CR>
    #nnoremap <butter><silent> q :q<CR>
    #inoremap <butter><silent> <CR> <ESC>:q<CR>
#endfunction

#autocmd FileType ddu-filer call s:ddu_filer_my_settings()
#function! s:ddu_filer_my_settings() abort
    #nnoremap <buffer><silent><expr> <CR>
    #\   ddu#ui#filer#is_tree() ?
    #\       "<Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>" :
    #\       "<Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open'})<CR>"
    #nnoremap <buffer><silent> o <Cmd>call ddu#ui#filer#do_action('expandItem', {'mode':  'toggle'})<CR>
    #nnoremap <buffer><silent> <leader>e <Cmd>call ddu#ui#filer#do_action('quit')<CR>
    #nnoremap <buffer><silent> c <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'copy'})<CR>
    #nnoremap <buffer><silent> p <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'paste'})<CR>
    #nnoremap <buffer><silent> d <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'delete'})<CR>
    #nnoremap <buffer><silent> r <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'rename'})<CR>
    #nnoremap <buffer><silent> mv <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'move'})<CR>
    #nnoremap <buffer><silent> t <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newFile'})<CR>
    #nnoremap <buffer><silent> mk <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'newDirectory'})<CR>
    #nnoremap <buffer><silent> yy <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'yank'})<CR>
#endfunction
#'''

#[[plugins]]
#repo = 'Shougo/ddu-ui-ff'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-ui-filer'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-source-file'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-source-file_rec'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-source-buffer'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-source-line'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-source-register'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-filter-sorter_alpha'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-filter-matcher_substring'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-kind-file'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-kind-word'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-column-filename'
#depend = 'ddu.vim'

#[[plugins]]
#repo = 'Shougo/ddu-commands.vim'
#depend = 'ddu.vim'
