[[plugins]]
repo = 'sainnhe/artify.vim'


[[plugins]]
repo = 'jeffreyiacono/vim-colors-wombat'
hook_add = '''
colorscheme wombat
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:vim_lightline_artify = 2

function! LightlineLSPWarnings() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.warning == 0 ? '' : printf("\uf071:%d", l:counts.warning)
endfunction


function! LightlineLSPErrors() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    return l:counts.error == 0 ? '' : printf("\uf057:%d", l:counts.error)
endfunction


function! LightlineLSPOk() abort
    let l:counts = lsp#get_buffer_diagnostics_counts()
    let l:total = l:counts.error + l:counts.warning
    return l:total == 0 ? "\uf058" : ''
endfunction


augroup LightLineOnLSP
    autocmd!
    autocmd User lsp_diagnostics_updated call lightline#update()
augroup END



function! DeviconsFiletype()
    " return winwidth(0) > 70 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : 'no ft') : ''
        return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction


function! TabNum(n) abort
    return a:n." \ue0bb"
endfunction

function! ArtifyActiveTabNum(n) abort
    return artify#convert(a:n, 'bold')." \ue0bb"
endfunction

function! ArtifyInactiveTabNum(n) abort
    return artify#convert(a:n, 'double_struck')." \ue0bb"
endfunction

function! ArtifyLightlineTabFilename(s) abort
    if g:vim_lightline_artify ==# 2
        return artify#convert(lightline#tab#filename(a:s), 'monospace')
    else
        return lightline#tab#filename(a:s)
    endif
endfunction

function! ArtifyLightlineMode() abort
    if g:vim_lightline_artify ==# 2
        return artify#convert(lightline#mode(), 'monospace')
    else
        return lightline#mode()
    endif
endfunction

function! ArtifyLinePercent() abort
    return artify#convert(string(100*(line('.')) / line('$')), 'bold')
endfunction

function! ArtifyLineNum() abort
    return artify#convert(string(line('.')), 'bold')
endfunction

function! ArtifyColNum() abort
    return artify#convert(string(getcurpos()[2]), 'bold')
endfunction

set laststatus=2
set noshowmode
let g:lightline = { 'colorscheme': 'wombat', }
let g:lightline.separator = {'left': "\ue0b8", 'right' : "\ue0be"}
let g:lightline.subseparator = { 'left': "\ue0b9", 'right': "\ue0b9" }
let g:lightline.tabline_separator = { 'left': "\ue0bc", 'right': "\ue0ba" }
let g:lightline.tabline_subseparator = { 'left': "\ue0bb", 'right': "\ue0bb" }
let g:lightline#asyncrun#indicator_none = ''
let g:lightline#asyncrun#indicator_run = 'Running...'
if g:vim_lightline_artify == 0
    let g:lightline.active = {
        \ 'left': [ [ 'mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'lineinfo' ],
        \            [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
        \            [ 'asyncrun_status' ] ]
        \ }
    let g:lightline.inactive = {
        \ 'left': [ [ 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right':[ [ 'lineinfo' ] ]
        \ }
    let g:lightline.tabline = {
        \ 'left': [ [ 'vim_logo', 'tabs' ] ],
        \ 'right': [ [ 'git_global' ],
        \            [ 'git_buffer' ] ]
        \ }
    let g:lightline.tab = {
        \ 'active': [ 'tabnum', 'filename', 'modified' ],
        \ 'inactive': [ 'tabnum', 'filename', 'modified' ]
        \ }
else
    let g:lightline.active = {
        \ 'left': [ [ 'artify_mode', 'paste' ],
        \           [ 'readonly', 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'artify_lineinfo' ],
        \            [ 'lsp_errors', 'lsp_warnings', 'lsp_ok' ],
        \            [ 'asyncrun_status' ] ]
        \ }
    let g:lightline.inactive = {
        \ 'left': [ [ 'filename', 'modified', 'fileformat', 'devicons_filetype' ] ],
        \ 'right': [ [ 'artify_lineinfo' ] ]
        \ }
    let g:lightline.tabline = {
        \ 'left': [ [ 'vim_logo', 'tabs' ] ],
        \ 'right': [ [ 'git_global' ],
        \            [ 'git_buffer' ] ]
        \ }
    let g:lightline.tab = {
        \ 'active': [ 'artify_activetabnum', 'artify_filename', 'modified' ],
        \ 'inactive': [ 'artify_inactivetabnum', 'filename', 'modified' ]
        \ }
endif
let g:lightline.tab_component_function = {
    \ 'artify_activetabnum': 'ArtifyActiveTabNum',
    \ 'artify_inactivetabnum': 'ArtifyInactiveTabNum',
    \ 'artify_filename': 'ArtifyLightlineTabFilename',
    \ 'tabnum': 'TabNum',
    \ 'filename': 'lightline#tab#filename',
    \ 'modified': 'lightline#tab#modified',
    \ 'readonly': 'lightline#tab#readonly'
    \ }
let g:lightline.component = {
    \ 'git_buffer': '',
    \ 'gitglobal': '',
    \ 'artify_mode': '%{ArtifyLightlineMode()}',
    \ 'artify_lineinfo': "%2{ArtifyLinePercent()}\uf295 %3{ArtifyLineNum()}:%-2{ArtifyColNum()}",
    \ 'bufinfo': '%{bufname("%")}:%{bufnr("%")}',
    \ 'vim_logo': "\ue7c5",
    \ 'mode': '%{lightline#mode()}',
    \ 'absolutepath': '%F',
    \ 'relativepath':'%f',
    \ 'filename': '%t',
    \ 'fileencoding': '%{&fenc!=#""?&fenc:&enc}',
    \ 'fileformat': '%{&fenc!=#""?&fenc:&enc}[%{&ff}]',
    \ 'filetype': '%{&ft!=#""?&ft:"no ft"}',
    \ 'modified': '%M',
    \ 'bufnum': '%n',
    \ 'paste': '%{&paste?"PASTE":""}',
    \ 'readonly': '%R',
    \ 'charvalue': '%b',
    \ 'charvaluehex': '%B',
    \ 'percent': '%3p%%',
    \ 'percentwin': '%P',
    \ 'spell': '%{ &spell?&spelllang:""}',
    \ 'lineinfo': '%3p%% %3l:%-2c',
    \ 'line': '%l',
    \ 'column': '%c',
    \ 'close': '%999X X ',
    \ 'winnr': '%{winnr()}'
    \ }
let g:lightline.component_function = {
    \ 'devicons_filetype': 'DeviconsFiletype',
    \ }
let g:lightline.component_expand = {
    \ 'lsp_warnings': 'LightlineLSPWarnings',
    \ 'lsp_errors': 'LightlineLSPErrors',
    \ 'lsp_ok': 'LightlineLSPOk',
    \ 'tabs': 'lightline#tabs',
    \ 'asyncrun_status': 'lightline#asyncrun#status'
    \ }
let g:lightline.component_type = {
    \ 'lsp_warnings': 'warning',
    \ 'lsp_errors': 'error',
    \ 'lsp_ok': 'middle',
    \ 'tabs': 'tabsel'
    \ }
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'
hook_add='''
if executable('tmux') && filereadable(expand('~/.bashrc')) && $TMUX !=# ''
    let g:vimIsInTmux = 1
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set t_Co=256
else
    let g:vimIsInTmux = 0
endif
if g:vimIsInTmux == 1
    let g:tmuxline_preset = {
        \ 'a'    : '#S',
        \ 'b'    : ['%R',"#{pomodoro_status}"],
        \ 'c'    : [ '#[fg=blue]\uf6d9#{download_speed}  #[fg=blue]\ufa51#{upload_speed}' ],
        \ 'win'  : [ '#I', '#W' ],
        \ 'cwin' : [ '#I', '#W', '#F' ],
        \ 'x'    : [ " #[fg=green]#{battery_percentage} #{battery_icon} #{battery_remain}" ],
        \ 'y'    : [ '%Y-%m-%d' ],
        \ 'z'    : "#{online_status} #(localip)"
        \ }
    let g:tmuxline_separators = {
        \ 'left'        : "\ue0bc",
        \ 'left_alt'    : "\ue0bd",
        \ 'right'       : "\ue0ba",
        \ 'right_alt'   : "\ue0bd",
        \ 'space'       : ' '
        \ }
endif
'''

[[plugins]]
repo = 'itchyny/vim-gitbranch'

[[plugins]]
repo = 'macthecadillac/lightline-gitdiff'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add='''
let g:webdevicons_enable_lightline_statusline = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
'''

[[plugins]]
repo = 'preservim/nerdtree'
hook_add='''
nnoremap <silent><leader>n :NERDTreeFocus<CR>
nnoremap <silent><C-n> :NERDTree<CR>
nnoremap <silent><C-t> :NERDTreeToggle<CR>
nnoremap <silent><C-f> :NERDTreeFind<CR>
'''

[[plugins]]
repo = 'junegunn/vim-peekaboo'
hook_add = '''
let g:peekaboo_delay = 0
'''

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
let g:lexima_enable_newline_rules = 1
let s:lexima_rules = [
\ {'char': '$', 'input_after': '$', 'filetype': 'latex'},
\ {'char': '$', 'at': '\%#\$', 'leave': 1, 'filetype': 'latex'},
\ {'char': '<BS>', 'at': '\$\%#\$', 'delete': 1, 'filetype': 'latex'},
\ {'char': ';', 'at': '(,*\%#)$', 'input': '<Right>;'},
\ {'char': ';', 'at': '^\s*\%#)$', 'input': '<Right>;'},
\ {'char': ';', 'at': '(,*\%#\}$', 'input': '<Right>;'},
\ {'char': ';', 'at': '^\s*\%#\}$', 'input': '<Right>;'},
\ ]

for s:lexima_rule in s:lexima_rules
    call lexima#add_rule(s:lexima_rule)
endfor
'''

[[plugins]]
repo = 'vim-denops/denops.vim'


[[plugins]]
repo = 'kat0h/bufpreview.vim'
hook_add ='''
nnoremap <silent><leader>m :PreviewMarkdown<CR>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'mechatroner/rainbow_csv'

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.erb,*.php,*.vue'
'''

[[plugins]]
repo = 'skywind3000/asyncrun.vim'

[[plugins]]
repo = 'albertomontesg/lightline-asyncrun'

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

